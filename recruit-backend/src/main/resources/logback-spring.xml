<configuration scan="true" debug="false">
	<property resource="properties/${spring.profiles.active}/logback.properties"/>
	<!-- 清除logback状态日志  -->
	<statusListener class="ch.qos.logback.core.status.NopStatusListener" />
	<appender name="FILE-ALL" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${_log.path}/${_file_name}.log</file>
		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<level>${_file_level}</level>   <!-- 过滤级别一下日志 -->
		</filter>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 每天滚动-->
			<fileNamePattern>${_log.path}/${_file_name}.%d{yyyy-MM-dd}.%i.log
			</fileNamePattern>
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<!-- 文件超过20M时产生新文件，这里设置小于20M是因为logback存在缓冲区-->
				<maxFileSize>${_max_file_size}</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
			<!-- 每30天清除一次历史 -->
			<maxHistory>${_max_history}</maxHistory>
		</rollingPolicy>
		<!-- <layout class="ch.qos.logback.classic.html.HTMLLayout"> 可以按HTML格式输出 -->
		<encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
			<charset>${_file_encode}</charset>
			<layout class="ch.qos.logback.classic.PatternLayout">
				<pattern>${_file_pattern}</pattern>
			</layout>
		</encoder>
	</appender>

	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<level>${_stdout_level}</level>
		</filter>
		<encoder>
			<pattern>${_stdout_pattern}</pattern>
			<charset>${_stdout_encode}</charset>
		</encoder>
	</appender>

	<root level="${_root_level}">
		<appender-ref ref="STDOUT"/>
		<appender-ref ref="FILE-ALL"/>
	</root>

	<logger name="com.cy" level="DEBUG"></logger>

</configuration>
